system goes like this:
basic system:
	encoder:
		modulo input x
			modulo size by var(x-y)
	decoder 1:
		multiply [x,y] in A 
		modulo
	decoder 2:
		multiply at the inverse of A
full system:
	in equations:
		mod(   q( mod( ax + D ))    -D - ay)
			a is alpha
		q(ax+D)=ax+D+z   
			z=quantization error
		so we will get the delta between x and y is:
			ax+D+z-D-ay
			=a(x-y+z)
		and for recovering x we will just do delta+y
	in flow:
		input generator:
			by cov matrix
		encoder 
			multipy by alpha
			add dither
			modulo
			quantisize
		the decoder has 2 blocks:
		decoder 1:
			subtitude by dither 
			subtitude by alpha y 
				or any other integer combinations - multiply by A (here its [1,-1]) so it will be inside the modulo
				to get linear algebra we probably better use A=[[1,-1],[-1,1]]
			modulo
			multiply by alpha

			here we actually get mod(x-y) and we hope that it's inside the modulo
		decoder 2:
			add y (the inverse of A)


alpha is var(x-y) / [var(x-y)+var(dither)] - wielner coefficient

opens:
	modulo depends on the statistice - on the cov so it might be that we dont have the same statistics but we want a known modulo size ahead so we want same modulo size to all
	so all inputs have the same modulo size, number of bins
	but what about var and alpha?
	
